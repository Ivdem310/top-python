Структура папки: C:\Users\Ефимов\pythonProjects\top-python\online\django_blog

- README.md
    [Содержимое файла: README.md]
- db.sqlite3
    [Содержимое файла: db.sqlite3]
[Папка] django_blog/
    - __init__.py
        [Содержимое файла: __init__.py]
    [Папка] article/
        - __init__.py
            [Содержимое файла: __init__.py]
        - admin.py
            [Содержимое файла: admin.py]
            from django.contrib import admin
            
            # Register your models here.
        - apps.py
            [Содержимое файла: apps.py]
            from django.apps import AppConfig
            
            
            class ArticleConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'django_blog.article'
        [Папка] migrations/
            - __init__.py
                [Содержимое файла: __init__.py]
        - models.py
            [Содержимое файла: models.py]
            from django.db import models
            
            # Create your models here.
        [Папка] templates/
        - tests.py
            [Содержимое файла: tests.py]
            from django.test import TestCase
            
            # Create your tests here.
        - urls.py
            [Содержимое файла: urls.py]
            from django.urls import path
            from django_blog.article import views
            
            urlpatterns = [
                path("", views.index),
            ]
        - views.py
            [Содержимое файла: views.py]
            from django.shortcuts import render
            from django.http import HttpResponse
            from django.views import View
            from django.shortcuts import redirect
            from django.urls import reverse
            
            def index(request):
                return HttpResponse("article")
    - asgi.py
        [Содержимое файла: asgi.py]
        """
        ASGI config for django_blog project.
        
        It exposes the ASGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
        """
        
        import os
        
        from django.core.asgi import get_asgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_blog.settings')
        
        application = get_asgi_application()
    - settings.py
        [Содержимое файла: settings.py]
        """
        Django settings for django_blog project.
        
        Generated by 'django-admin startproject' using Django 5.2.4.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/topics/settings/
        
        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/5.2/ref/settings/
        """
        
        from pathlib import Path
        
        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent
        
        
        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
        
        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = 'django-insecure-0y-_qb&2-*9=m4w!%h+!1y!ds2f%w@qdm^h-#xuoq#ubq=k=pl'
        
        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = True
        
        ALLOWED_HOSTS = []
        
        
        # Application definition
        
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'django_blog',
            'django_blog.article',
            'django_blog.users',
        ]
        
        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]
        
        ROOT_URLCONF = 'django_blog.urls'
        
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [BASE_DIR / 'templates'],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
        
        WSGI_APPLICATION = 'django_blog.wsgi.application'
        
        
        # Database
        # https://docs.djangoproject.com/en/5.2/ref/settings/#databases
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        
        
        # Password validation
        # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
        
        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]
        
        
        # Internationalization
        # https://docs.djangoproject.com/en/5.2/topics/i18n/
        
        LANGUAGE_CODE = 'en-us'
        
        TIME_ZONE = 'UTC'
        
        USE_I18N = True
        
        USE_TZ = True
        
        
        # Static files (CSS, JavaScript, Images)
        # https://docs.djangoproject.com/en/5.2/howto/static-files/
        
        STATIC_URL = 'static/'
        
        # Default primary key field type
        # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
        
        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
    [Папка] templates/
        - about.html
            [Содержимое файла: about.html]
            {% extends "base.html" %}
            {% block title %}О нас{% endblock %}
            {% block content %}
                <h2>О компании</h2>
                <p>Это пример сайта, созданного с помощью Django.</p>
                <p>{{ tags|join:", " }}</p>
            {% endblock %}
        - base.html
            [Содержимое файла: base.html]
            <!DOCTYPE html>
            <html lang="en">
                <head>
                    <title>{% block title %}Название по умолчанию{% endblock %}</title>
                </head>
            
                <body>
                    <header>
                        <h1>мой блог</h1>
                    </header>
            
                    <nav>
                        <ul>
                            <li><a href="/">Главная</a></li>
                            <li><a href="/articles/">Статьи</a></li>
                        </ul>
                    </nav>
            
                    <div id="content">
                        {% block content %}{% endblock %}
                    </div>
            
                    <footer>© 2023</footer>
                </body>
            </html>
        - index.html
            [Содержимое файла: index.html]
            <h1>Hello, {{ who }}!</h1>
    - urls.py
        [Содержимое файла: urls.py]
        """
        URL configuration for django_blog project.
        
        The `urlpatterns` list routes URLs to views. For more information please see:
            https://docs.djangoproject.com/en/5.2/topics/http/urls/
        Examples:
        Function views
            1. Add an import:  from my_app import views
            2. Add a URL to urlpatterns:  path('', views.home, name='home')
        Class-based views
            1. Add an import:  from other_app.views import Home
            2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
        Including another URLconf
            1. Import the include() function: from django.urls import include, path
            2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
        """
        from django.contrib import admin
        from django.urls import path, include
        from django_blog import views
        from django_blog.views import IndexView
        #from django.views.generic import TemplateView
        from django.views.generic.base import TemplateView
        
        class HomePageView(TemplateView):
            template_name = 'index.html'
        
            def get_context_data(self, **kwargs):
                context = super().get_context_data(**kwargs)
                context['who'] = 'world'
                return context
        
        urlpatterns = [
            path('', HomePageView.as_view()),
            path('admin/', admin.site.urls),
            #path('auth/', include('django.contrib.auth.urls')),
            path('about/', views.about), # статический маршрут
            path('articles/', include('django_blog.article.urls')),
            #path("users/<int:user_id>/", views.user_profile), # динамический маршрут
            #path("users/<int:user_id>/pets/<int:pet_id>/med_info/", views.med_info_view),
            # глубокий динамический маршрут  /users/42/pets/101/med_info/
            path('users/', include('django_blog.users.urls')), # вложенный маршрут
        ]
        
    [Папка] users/
        - __init__.py
            [Содержимое файла: __init__.py]
        - admin.py
            [Содержимое файла: admin.py]
            from django.contrib import admin
            
            # Register your models here.
        - apps.py
            [Содержимое файла: apps.py]
            from django.apps import AppConfig
            
            
            class UsersConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'django_blog.users'
            
        [Папка] migrations/
            - __init__.py
                [Содержимое файла: __init__.py]
        - models.py
            [Содержимое файла: models.py]
            from django.db import models
            
            # Create your models here.
        [Папка] templates/
            - med_info.html
                [Содержимое файла: med_info.html]
                {% extends "base.html" %}
                {% block content %}
                    <h1>Медицинские данные</h1>
                    <p>User ID: {{ user_id }}, Pet ID: {{ pet_id }}</p>
                    <p>Сформированная ссылка: {{ type }}</p>
                {% endblock %}
        - tests.py
            [Содержимое файла: tests.py]
            from django.test import TestCase
            
            # Create your tests here.
        - urls.py
            [Содержимое файла: urls.py]
            from django.urls import path
            from . import views
            
            urlpatterns = [
                path('', views.users_view),
                #path('<int:user_id>/pets/<int:pet_id>/med_info/', views.pet_med_info_view),
                path(
                    '<int:user_id>/pets/<int:pet_id>/med_info/',
                    views.pet_med_info_view,
                    name='pet_med_info',
                ),
            ]
        - views.py
            [Содержимое файла: views.py]
            from django.shortcuts import render
            from django.http import HttpResponse
            from django.urls import reverse
            
            def users_view(request):
                return HttpResponse("Users list (from project app)")
            
            def pet_med_info_view(request, user_id, pet_id):
                return render(
                    request,
                    'med_info.html',
                    context={'user_id': user_id, 'pet_id': pet_id, 'type': f'{reverse("pet_med_info", kwargs={"user_id": user_id, "pet_id": pet_id})}'},
                )
    - views.py
        [Содержимое файла: views.py]
        from django.shortcuts import render
        from django.http import HttpResponse
        from django.views import View
        
        class IndexView(View):
            def get(self, request, *args, **kwargs):
                return render(
                request,
                'index.html',
                context={'who': 'world'},
            )
        
        def index(request):
            return render(
                request,
                'index.html',
                context={'who': 'world'},
            )
        
        def about(request):
            tags = ['программировние', 'tag2', 'tag3']
            return render(
                request,
                'about.html',
                context={'tags': tags})
        
        # def med_info_view(request, user_id, pet_id):
        #     ...
    - wsgi.py
        [Содержимое файла: wsgi.py]
        """
        WSGI config for django_blog project.
        
        It exposes the WSGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
        """
        
        import os
        
        from django.core.wsgi import get_wsgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_blog.settings')
        
        application = get_wsgi_application()
- main.py
    [Содержимое файла: main.py]
    def main():
        print("Hello from django-blog!")
    
    
    if __name__ == "__main__":
        main()
- manage.py
    [Содержимое файла: manage.py]
    #!/usr/bin/env python
    """Django's command-line utility for administrative tasks."""
    import os
    import sys
    
    
    def main():
        """Run administrative tasks."""
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_blog.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)
    
    
    if __name__ == '__main__':
        main()
- pyproject.toml
    [Содержимое файла: pyproject.toml]
    [project]
    name = "django-blog"
    version = "0.1.0"
    description = "Add your description here"
    readme = "README.md"
    requires-python = ">=3.13"
    dependencies = [
        "django>=5.2.4",
    ]
- theory.py
    [Содержимое файла: theory.py]
    """
    uv init django_blog
    cd django_blog
    powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
    uv add django
    uv run django-admin startproject django_blog .
    uv run django-admin version
    uv run manage.py runserver
    uv run manage.py migrate
    django-admin startapp article
    
    runserver - запуск сервера ращработки
    migrate - применение миграций
    makemigrations - создание миграций
    shell - работа с базой через интерактивную оболочку
    createsuperuser - создание суперпользователя для админки
    test - запуск тестов
    startapp - генерация приложений
    
    
    {% if user.is_authenticated %}
        <p>Привет, {{ user.username }}!</p>
    {% else %}
        <p>Пожалуйста, <a href="{% url 'login' %}">войдите</a> или <a href="{% url 'register' %}">зарегистрируйтесь</a>.</p>
    {% endif %}
    
    <ul>
        {% for article in articles %}
            <li><a href="{% url 'article_detail' article.id %}">{{ article.title }}</a></li>
        {% endfor %}
    </ul>
    
    django.template.context_processors.request - добавляет переменную request в контекст шаблона
    django.template.context_processors.debug - добавляет переменную DEBUG в контекст шаблона
    
    def login_view(request):
        if request.method == 'GET':
            return render(request, 'login.html')
        elif request.method == 'POST':
            username = request.POST['username']
            password = request.POST['password']
            # Проверка логина и пароля
            return HTTPResponse('Логин и пароль введены верно')
    
    from django.views.decorators.http import require_http_methods
    
    @require_http_methods(['GET', 'POST'])
    def login_view(request):
        ...
    
    from django.http import HttpResponse
    from django.views import View
    
    class IndexView(View):
        def get(self, request, *args, **kwargs):
            return HttpResponse('Hello, world!')
    
    конвертеры для динамических URL
    int - целое число
    str - строка без слешей
    slug - строка из латинских букв и цифр и дефисов и подчеркиваний
    uuid - уникальный идентификатор формата uuid
    path - строка может содержать слеши
    
    Сделайте так, чтобы django_blog.article.views.index принимала строковый параметр "tags"
    и целочисленный параметр "article_id" из пути /articles/tags/article_id и выводила текст в виде Статья номер 42. Тег python
    Назначьте django_blog.article.views.index имя "article"
    Сделайте так, чтобы открытие "домашней страницы" делало перенаправление на /articles/python/42.
    Для этого используйте django.shortcuts.redirect и django.urls.reverse. Не задавайте URL напрямую,
    используйте обратный маршрут
    """
- uv.lock
    [Содержимое файла: uv.lock]
    version = 1
    revision = 2
    requires-python = ">=3.13"
    
    [[package]]
    name = "asgiref"
    version = "3.9.1"
    source = { registry = "https://pypi.org/simple" }
    sdist = { url = "https://files.pythonhosted.org/packages/90/61/0aa957eec22ff70b830b22ff91f825e70e1ef732c06666a805730f28b36b/asgiref-3.9.1.tar.gz", hash = "sha256:a5ab6582236218e5ef1648f242fd9f10626cfd4de8dc377db215d5d5098e3142", size = 36870, upload-time = "2025-07-08T09:07:43.344Z" }
    wheels = [
        { url = "https://files.pythonhosted.org/packages/7c/3c/0464dcada90d5da0e71018c04a140ad6349558afb30b3051b4264cc5b965/asgiref-3.9.1-py3-none-any.whl", hash = "sha256:f3bba7092a48005b5f5bacd747d36ee4a5a61f4a269a6df590b43144355ebd2c", size = 23790, upload-time = "2025-07-08T09:07:41.548Z" },
    ]
    
    [[package]]
    name = "django"
    version = "5.2.4"
    source = { registry = "https://pypi.org/simple" }
    dependencies = [
        { name = "asgiref" },
        { name = "sqlparse" },
        { name = "tzdata", marker = "sys_platform == 'win32'" },
    ]
    sdist = { url = "https://files.pythonhosted.org/packages/9c/7e/034f0f9fb10c029a02daaf44d364d6bf2eced8c73f0d38c69da359d26b01/django-5.2.4.tar.gz", hash = "sha256:a1228c384f8fa13eebc015196db7b3e08722c5058d4758d20cb287503a540d8f", size = 10831909, upload-time = "2025-07-02T18:47:39.19Z" }
    wheels = [
        { url = "https://files.pythonhosted.org/packages/14/ae/706965237a672434c8b520e89a818e8b047af94e9beb342d0bee405c26c7/django-5.2.4-py3-none-any.whl", hash = "sha256:60c35bd96201b10c6e7a78121bd0da51084733efa303cc19ead021ab179cef5e", size = 8302187, upload-time = "2025-07-02T18:47:35.373Z" },
    ]
    
    [[package]]
    name = "django-blog"
    version = "0.1.0"
    source = { virtual = "." }
    dependencies = [
        { name = "django" },
    ]
    
    [package.metadata]
    requires-dist = [{ name = "django", specifier = ">=5.2.4" }]
    
    [[package]]
    name = "sqlparse"
    version = "0.5.3"
    source = { registry = "https://pypi.org/simple" }
    sdist = { url = "https://files.pythonhosted.org/packages/e5/40/edede8dd6977b0d3da179a342c198ed100dd2aba4be081861ee5911e4da4/sqlparse-0.5.3.tar.gz", hash = "sha256:09f67787f56a0b16ecdbde1bfc7f5d9c3371ca683cfeaa8e6ff60b4807ec9272", size = 84999, upload-time = "2024-12-10T12:05:30.728Z" }
    wheels = [
        { url = "https://files.pythonhosted.org/packages/a9/5c/bfd6bd0bf979426d405cc6e71eceb8701b148b16c21d2dc3c261efc61c7b/sqlparse-0.5.3-py3-none-any.whl", hash = "sha256:cf2196ed3418f3ba5de6af7e82c694a9fbdbfecccdfc72e281548517081f16ca", size = 44415, upload-time = "2024-12-10T12:05:27.824Z" },
    ]
    
    [[package]]
    name = "tzdata"
    version = "2025.2"
    source = { registry = "https://pypi.org/simple" }
    sdist = { url = "https://files.pythonhosted.org/packages/95/32/1a225d6164441be760d75c2c42e2780dc0873fe382da3e98a2e1e48361e5/tzdata-2025.2.tar.gz", hash = "sha256:b60a638fcc0daffadf82fe0f57e53d06bdec2f36c4df66280ae79bce6bd6f2b9", size = 196380, upload-time = "2025-03-23T13:54:43.652Z" }
    wheels = [
        { url = "https://files.pythonhosted.org/packages/5c/23/c7abc0ca0a1526a0774eca151daeb8de62ec457e77262b66b359c3c7679e/tzdata-2025.2-py2.py3-none-any.whl", hash = "sha256:1a403fada01ff9221ca8044d701868fa132215d84beb92242d9acd2147f667a8", size = 347839, upload-time = "2025-03-23T13:54:41.845Z" },
    ]
