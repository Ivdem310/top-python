Структура папки: C:\Users\Ефимов\pythonProjects\top-python\online\django_blog\django_blog\users

- __init__.py
    [Содержимое файла: __init__.py]
- admin.py
    [Содержимое файла: admin.py]
    from django.contrib import admin
    from .models import User
    
    @admin.register(User)
    class UserAdmin(admin.ModelAdmin):
        list_display = ('id', 'username', 'email', 'created_at')
- apps.py
    [Содержимое файла: apps.py]
    from django.apps import AppConfig
    
    
    class UsersConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'django_blog.users'
    
[Папка] fixtures/
    - users.json
        [Содержимое файла: users.json]
        [
            {
                "model": "users.user",
                "pk": 1,
                "fields": {
                    "username": "first_test_user",
                    "email": "first_test_user@mail.ru"
                }
            },
            {
                "model": "users.user",
                "pk": 2,
                "fields": {
                    "username": "second_test_user",
                    "email": "second_test_user@mail.ru"
                }
            },
            {
                "model": "users.user",
                "pk": 3,
                "fields": {
                    "username": "testuser",
                    "email": "9V7B0@example.com"
                }
            }
        ]
[Папка] migrations/
    - 0001_initial.py
        [Содержимое файла: 0001_initial.py]
        # Generated by Django 5.2.1 on 2025-08-24 09:33
        
        from django.db import migrations, models
        
        
        class Migration(migrations.Migration):
        
            initial = True
        
            dependencies = [
            ]
        
            operations = [
                migrations.CreateModel(
                    name='User',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('username', models.CharField(max_length=150, unique=True)),
                        ('email', models.EmailField(max_length=254, unique=True)),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                    ],
                ),
            ]
    - __init__.py
        [Содержимое файла: __init__.py]
- models.py
    [Содержимое файла: models.py]
    from django.db import models
    
    class User(models.Model):
        username = models.CharField(max_length=150, unique=True)
        email = models.EmailField(unique=True)
        created_at = models.DateTimeField(auto_now_add=True)
    
        def __str__(self):
            return self.username
[Папка] templates/
    - med_info.html
        [Содержимое файла: med_info.html]
        {% extends "base.html" %}
        {% block content %}
            <h1>Медицинские данные</h1>
            <p>User ID: {{ user_id }}, Pet ID: {{ pet_id }}</p>
            <p>Сформированная ссылка: {{ type }}</p>
        {% endblock %}
    - user_update.html
        [Содержимое файла: user_update.html]
        {% extends "base.html" %}
        
        {% block content %}
            <h1>Update User</h1>
            <from method="POST">
                {% csrf_token %}
                {{ form.as_p }}
                <button type="submit">Update</button>
            </from>
        {% endblock %}
    - users_list.html
        [Содержимое файла: users_list.html]
        {% extends "base.html" %}
        {% block content %}
            <h1>Список пользователей</h1>
            <ul>
                {% for user in users %}
                    <li>{{ user.username }} ({{ user.email }})</li>
                {% empty %}
                    <li>Пользователей нет</li>
                {% endfor %}
            </ul>
        {% endblock %}
- tests.py
    [Содержимое файла: tests.py]
    from django.test import TestCase
    from django.urls import reverse
    from .models import User
    #from django.contrib.auth import get_user_model
    
    #User = get_user_model()
    
    class UsersTest(TestCase):
        def setUp(self):
            fixtures = ["users.json"]
            #self.user = User.objects.create(username='testuser', email='9V7B0@example.com')
    
        def test_users_list(self):
            response = self.client.get(reverse('index'))
            self.assertEqual(response.status_code, 200)
            self.assertContains(response, 'testuser')
    
        def test_user_update_flow(self):
            update_url = reverse('update', kwargs={'pk': self.user.pk})
            list_url = reverse('index')
    
            self.client.post(update_url, {'username': 'newtestuser', 'email': self.user.email})
    
            response = self.client.get(list_url)
    
            self.assertContains(response, 'newtestuser')
            self.assertFalse(User.objects.filter(username='testuser').exists())
- urls.py
    [Содержимое файла: urls.py]
    from django.urls import path
    from . import views
    
    urlpatterns = [
        path('', views.users_view, name='index'),
        #path('<int:user_id>/pets/<int:pet_id>/med_info/', views.pet_med_info_view),
        path(
            '<int:user_id>/pets/<int:pet_id>/med_info/',
            views.pet_med_info_view,
            name='pet_med_info',
        ),
        path('update/<int:pk>', views.UserUpdateView.as_view(), name='update'),
    ]
- views.py
    [Содержимое файла: views.py]
    from django.shortcuts import render
    from django.http import HttpResponse
    from django.urls import reverse, reverse_lazy
    from .models import User
    from django.views.generic.edit import UpdateView
    
    def users_view(request):
        users = User.objects.all()
        return render(request, 'users_list.html', context={'users': users})
    
    def pet_med_info_view(request, user_id, pet_id):
        return render(
            request,
            'med_info.html',
            context={'user_id': user_id, 'pet_id': pet_id, 'type': f'{reverse("pet_med_info", kwargs={"user_id": user_id, "pet_id": pet_id})}'},
        )
    
    class UserUpdateView(UpdateView):
        model = User
        fields = ['username', 'email']
        template_name = 'user_update.html'
        success_url = reverse_lazy('index')
