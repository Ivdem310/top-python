# client.py
import asyncio
import aiohttp
from aiohttp import WSMsgType, WSCloseCode
import logging
import signal
import sys
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

class WebSocketClient:
    def __init__(self, url):
        self.url = url
        self.session = None
        self.outgoing_queue = asyncio.Queue()
        self.retry_delay = 1.0
        self.max_retry_delay = 60.0
        self.connection_count = 0
        self.messages_received = 0
        self.messages_sent = 0
    
    async def connect_websocket(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å heartbeat"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        
        return await self.session.ws_connect(
            self.url,
            heartbeat=30.0,
            timeout=10.0
        )
    
    async def handle_incoming(self, ws):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        logger.info("‚úì –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        try:
            async for msg in ws:
                if msg.type == WSMsgType.TEXT:
                    self.messages_received += 1
                    logger.info(f"üì© –í—Ö–æ–¥—è—â–µ–µ #{self.messages_received}: {msg.data}")
                elif msg.type == WSMsgType.BINARY:
                    logger.info(f"üì¶ –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(msg.data)} –±–∞–π—Ç")
                elif msg.type == WSMsgType.CLOSED:
                    logger.warning("‚ö†Ô∏è  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                    break
                elif msg.type == WSMsgType.ERROR:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {ws.exception()}")
                    break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: {e}")
        finally:
            logger.info("‚úó –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def handle_outgoing(self, ws):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info("‚úì –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        try:
            while not ws.closed:
                try:
                    msg = await asyncio.wait_for(
                        self.outgoing_queue.get(),
                        timeout=1.0
                    )
                    if not ws.closed:
                        await ws.send_str(msg)
                        self.messages_sent += 1
                        logger.info(f"üì§ –ò—Å—Ö–æ–¥—è—â–µ–µ #{self.messages_sent}: {msg}")
                except asyncio.TimeoutError:
                    continue
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        finally:
            logger.info("‚úó –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def maintain_connection(self, shutdown_event):
        """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        try:
            while not shutdown_event.is_set():
                try:
                    self.connection_count += 1
                    logger.info(f"\n{'='*60}")
                    logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #{self.connection_count} –∫ {self.url}")
                    logger.info(f"{'='*60}")
                    
                    ws = await self.connect_websocket()
                    logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ={self.messages_received}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ={self.messages_sent}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    self.retry_delay = 1.0
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    async with asyncio.TaskGroup() as tg:
                        tg.create_task(self.handle_incoming(ws))
                        tg.create_task(self.handle_outgoing(ws))
                    
                    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    if not ws.closed:
                        logger.info("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        await ws.close(code=WSCloseCode.GOING_AWAY)
                    
                except aiohttp.WSServerHandshakeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ handshake: {e}")
                except aiohttp.ClientError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                except asyncio.TimeoutError:
                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω timeout —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                except ConnectionResetError:
                    logger.error("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
                
                if shutdown_event.is_set():
                    break
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.info(f"‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.retry_delay:.1f} —Å–µ–∫—É–Ω–¥...")
                try:
                    await asyncio.wait_for(
                        shutdown_event.wait(),
                        timeout=self.retry_delay
                    )
                    break
                except asyncio.TimeoutError:
                    pass
                
                self.retry_delay = min(self.retry_delay * 2, self.max_retry_delay)
        
        finally:
            if self.session:
                await self.session.close()
            logger.info("\nüõë WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info(f"üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {self.connection_count}")
            logger.info(f"   - –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_received}")
            logger.info(f"   - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_sent}")
    
    async def send_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É"""
        await self.outgoing_queue.put(message)

async def message_producer(client, shutdown_event):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥"""
    counter = 0
    while not shutdown_event.is_set():
        await asyncio.sleep(5)
        if not shutdown_event.is_set():
            counter += 1
            message = f"–ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞! –°–æ–æ–±—â–µ–Ω–∏–µ #{counter}"
            await client.send_message(message)

async def main():
    shutdown_event = asyncio.Event()
    
    # –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info("\n‚ö° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        shutdown_event.set()
    
    # –ù–∞ Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º signal.signal, –Ω–∞ Unix –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å add_signal_handler
    if sys.platform == 'win32':
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    else:
        loop = asyncio.get_running_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, lambda: signal_handler(sig, None))
    
    url = "ws://localhost:8088/ws"
    client = WebSocketClient(url)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞")
    logger.info(f"üéØ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {url}")
    logger.info("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        async with asyncio.TaskGroup() as tg:
            tg.create_task(client.maintain_connection(shutdown_event))
            tg.create_task(message_producer(client, shutdown_event))
    except* KeyboardInterrupt:
        logger.info("‚ö° KeyboardInterrupt –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω")
        shutdown_event.set()
    except* Exception as eg:
        logger.info("–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏")
    
    logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö° –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç KeyboardInterrupt")